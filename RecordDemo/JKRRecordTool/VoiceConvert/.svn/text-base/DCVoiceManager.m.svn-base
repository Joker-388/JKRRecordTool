//
//  DCVoiceManager.m
//  dogchain
//
//  Created by EricLau on 16/5/29.
//  Copyright © 2016年 tronsis. All rights reserved.
//

#import "DCVoiceManager.h"


@interface DCVoiceManager ()<AVAudioPlayerDelegate, AVAudioRecorderDelegate, AVAudioSessionDelegate>

@property (nonatomic, strong)NSTimer *timer;
@end

@implementation DCVoiceManager{
    NSString *fileName_;
    CGFloat accumulatedTime;
}

+(instancetype)defaultManager{//单例
    static DCVoiceManager *manager;
    //    static dispatch_once_t onceToken;
    //    dispatch_once(&onceToken, ^{
    manager = [[DCVoiceManager alloc]init];
    [manager setAudioSession];
    //    });
    return manager;
}

-(void)recordVoiceWithFileName:(NSString *)name{//录音
    if ([self.audioRecorder isRecording]) {
        [self.audioRecorder stop];
    }
    fileName_ = name;
    accumulatedTime = 0;
    [self.audioRecorder record];
    self.timer.fireDate = [NSDate distantPast];
}
-(void)playVoiceWithFileName:(NSString *)name{//播放
    fileName_ = name;
    if ([self.audioPlayer isPlaying]) {
        [self.audioPlayer stop];
    }
    [self.audioPlayer play];
}

-(void)stopRecording{//停止录音
    [self.audioRecorder stop];
    self.timer.fireDate = [NSDate distantFuture];
}
-(void)stopPlaying{//停止播放
    [self.audioPlayer stop];
}
-(NSArray *)getRecordedVoices{//获得沙盒内音频文件
    NSError *error;
    NSArray *tmpArr = [[NSFileManager defaultManager] contentsOfDirectoryAtURL:[self getSaveDirectoryPath] includingPropertiesForKeys:@[NSURLNameKey] options:NSDirectoryEnumerationSkipsHiddenFiles error:&error];//里面装的是 nsurl 对象
    if (error) {
        DLog(@"%@",error.localizedDescription);
        return nil;
    }
    NSMutableArray *mArr = [NSMutableArray new];
    [tmpArr enumerateObjectsUsingBlock:^(id  _Nonnull obj, NSUInteger idx, BOOL * _Nonnull stop) {
        [mArr addObject:[[obj lastPathComponent] stringByDeletingPathExtension]];//只保留文件名，不需要后缀
    }];
    
    return mArr;
}

#pragma mark - private method
#pragma mark -- recorder
-(NSURL *)getSaveFilePath{//音频文件路径
    NSURL *directoryUrl = [self getSaveDirectoryPath];
    NSString *urlStr = [directoryUrl absoluteString];
    if (!fileName_) {
        return nil;
    }
    NSString *formatFiledName = [NSString stringWithFormat:@"%@.wav",fileName_];
    urlStr=[urlStr stringByAppendingPathComponent:formatFiledName];
    NSLog(@"file path:%@",urlStr);
    NSURL *url=[NSURL fileURLWithPath:urlStr isDirectory:NO];
    return url;
}
-(NSURL *)getSaveDirectoryPath{//音频文件夹路径
    NSString *urlStr=[NSSearchPathForDirectoriesInDomains(NSDocumentDirectory, NSUserDomainMask, YES) lastObject];
    urlStr = [urlStr stringByAppendingPathComponent:@"DCVoiceManager"];
    
    NSError *error;
    
    BOOL isCreated = [[NSFileManager defaultManager] createDirectoryAtPath:urlStr withIntermediateDirectories:YES attributes:nil error:&error];
    if (!isCreated) {
        DLog(@"%@",error.localizedDescription);
    }
    return [NSURL URLWithString:urlStr];
}
-(void)setAudioSession{
    AVAudioSession *audioSession=[AVAudioSession sharedInstance];
    //设置为播放和录音状态，以便可以在录制完之后播放录音
    [audioSession setCategory:AVAudioSessionCategoryPlayAndRecord error:nil];
    [audioSession setActive:YES error:nil];
}
-(NSDictionary *)getAudioSetting{//获得音频频率相关设置
    return [VoiceConverter GetAudioRecorderSettingDict];
}

-(void)uploadVoiceFile:(NSString *)name{//上传音频
    
}

-(BOOL)isRecording{//正在录音？真机和模拟器状态不同。
    return [self.audioRecorder isRecording];
}
-(BOOL)isPlaying{//正在播放？真机和模拟器状态不同。
    return [self.audioPlayer isPlaying];
}
#pragma mark -- player

#pragma mark - lazyLoad
-(AVAudioRecorder *)audioRecorder{
    if (!_audioRecorder) {
        NSURL *saveUrl  = [self getSaveFilePath];
        if (!saveUrl) {
            return nil;
        }
        NSDictionary *settings = [self getAudioSetting];
        NSError *error;
        _audioRecorder = [[AVAudioRecorder alloc]initWithURL:saveUrl settings:settings error:&error];
        _audioRecorder.delegate = self;
        if (error) {
            DLog(@"wrong init for audioRecorder");
            return nil;
        }
        [_audioRecorder prepareToRecord];
    }
    return _audioRecorder;
}
-(AVAudioPlayer *)audioPlayer{
    if (!_audioPlayer) {
        NSError *error;
        NSURL *url = [self getSaveFilePath];
        _audioPlayer = [[AVAudioPlayer alloc]initWithContentsOfURL:url error:&error];
        _audioPlayer.numberOfLoops = 0;
        [_audioPlayer prepareToPlay];
    }
    return _audioPlayer;
}
-(NSTimer *)timer{
    if (!_timer) {
        _timer = [NSTimer scheduledTimerWithTimeInterval:0.01f target:self selector:@selector(recordingTimeChange) userInfo:nil repeats:YES];
        [[NSRunLoop currentRunLoop] addTimer:_timer forMode:NSRunLoopCommonModes];
    }
    return _timer;
}

#pragma mark - NSTimer Method
-(void)recordingTimeChange{
    accumulatedTime+=0.01f;
    
    NSInteger tempHour = accumulatedTime / 3600;
    NSInteger tempMinute = accumulatedTime / 60 - (tempHour * 60);
    NSInteger tempSecond = accumulatedTime - (tempHour * 3600 + tempMinute * 60);
    NSInteger tempMSecond = ((NSInteger)(accumulatedTime * 100)) % 99;
    ;
    
    //    NSString *hour = [[NSNumber numberWithInteger:tempHour] stringValue];
    NSString *minute = [[NSNumber numberWithInteger:tempMinute] stringValue];
    NSString *second = [[NSNumber numberWithInteger:tempSecond] stringValue];
    NSString *msecond = [[NSNumber numberWithInteger:tempMSecond] stringValue];
    
    //    DLog(@"%@",msecond);
    //    if (tempHour < 10) {
    //        hour = [@"0" stringByAppendingString:hour];
    //    }
    if (tempMinute < 10) {
        minute = [@"0" stringByAppendingString:minute];
    }
    if (tempSecond < 10) {
        second = [@"0" stringByAppendingString:second];
    }
    if (tempMSecond < 10) {
        msecond = [@"0" stringByAppendingString:msecond];
    }
    //    self.timeLabel.text = [NSString stringWithFormat:@"%@:%@:%@:%@", hour,minute, second, msecond];
    NSString *timeStr = [NSString stringWithFormat:@"%@:%@:%@", minute, second, msecond];
    self.blockTime(timeStr);
}

-(void)renameVoiceFromName:(NSString *)oldName toName:(NSString *)newName{
    
}

- (void)dealloc{
    [self.timer invalidate];
}
@end
